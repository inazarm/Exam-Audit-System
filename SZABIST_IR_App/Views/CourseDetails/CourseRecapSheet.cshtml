@model  SZABIST_IR_App.Models.RecapSheet_Result

<style>
    BODY {
        FONT-FAMILY: Verdana;
        FONT-SIZE: 8pt
    }

    TABLE {
        FONT-SIZE: 10pt;
    }

    .btn {
        BACKGROUND: #dbeaf0;
        BORDER-BOTTOM: #104a7b 1px solid;
        BORDER-LEFT: #afc4d5 1px solid;
        BORDER-RIGHT: #104a7b 1px solid;
        BORDER-TOP: #afc4d5 1px solid;
        COLOR: #000066;
        CURSOR: hand;
        FONT-FAMILY: tahoma,sans-serif;
        FONT-SIZE: 11px;
        TEXT-DECORATION: none
    }


    thead tr th {
        color: white;
    }

    A.leftMenu:link {
        BACKGROUND-COLOR: transparent;
        COLOR: #dee3ee;
        TEXT-DECORATION: none
    }

    A.leftMenu:visited {
        BACKGROUND-COLOR: transparent;
        COLOR: #cef3de;
        TEXT-DECORATION: none
    }

    A.leftMenu:hover {
        BACKGROUND-COLOR: transparent;
        COLOR: #ffffff;
        TEXT-DECORATION: underline
    }

    A.leftMenu:active {
        BACKGROUND-COLOR: transparent;
        COLOR: #ced3de;
        TEXT-DECORATION: underline
    }

    .FacRow1 {
        BACKGROUND-COLOR: linen
    }

    .FacRow2 {
        BACKGROUND-COLOR: gainsboro
    }

    .TableHeading {
        COLOR: darkred;
        FONT-SIZE: 12pt
    }

    .ColumnHeading {
        COLOR: blue;
        FONT-SIZE: 10pt
    }

    .RequestApproved {
        COLOR: springgreen;
        CURSOR: hand;
        TEXT-DECORATION: underline
    }

    .RequestRejected {
        COLOR: #ff000a;
        CURSOR: hand;
        TEXT-DECORATION: underline
    }

    .LeftMenuBreak {
        COLOR: #ced3de;
        TEXT-DECORATION: underline
    }

    .textColor {
        COLOR: #ffffff;
        FONT-WEIGHT: bolder
    }

    .InputBox {
        BACKGROUND-COLOR: #ffffd6
    }

    .textSmall {
        FONT-SIZE: 10pt
    }

    .Bsbttn {
        BACKGROUND: #d6e7ef;
        BORDER-BOTTOM: #104a7b 1px solid;
        BORDER-LEFT: #afc4d5 1px solid;
        BORDER-RIGHT: #104a7b 1px solid;
        BORDER-TOP: #afc4d5 1px solid;
        COLOR: #000066;
        CURSOR: hand;
        FONT-SIZE: 10px;
        TEXT-DECORATION: none
    }

    .PageTitleHeaderColor_1 {
        BACKGROUND-COLOR: #d1a979
    }

    .PageTitleHeaderColor_2 {
        BACKGROUND-COLOR: seashell;
        COLOR: dodgerblue
    }

    .PageTitleHeaderColor_3 {
        BACKGROUND-COLOR: #d1a979;
        COLOR: dodgerblue
    }

    .PageTitleHeaderColor_12 {
        BACKGROUND-COLOR: seashell;
        COLOR: dodgerblue
    }

    .PageTitleHeaderColor_13 {
        BACKGROUND-COLOR: seashell;
        COLOR: dodgerblue
    }

    .PageTitleHeaderColor_14 {
        BACKGROUND-COLOR: seashell;
        COLOR: dodgerblue
    }

    .PageTitleHeaderColor_12 {
        BACKGROUND-COLOR: seashell;
        COLOR: dodgerblue
    }

    .TableBGColor {
        BACKGROUND-COLOR: #ffdab9
    }

    .TitleRow {
        COLOR: #ffffff;
        FONT-WEIGHT: bolder;
        BACKGROUND-COLOR: Navy;
    }

    TABLE.Recap {
        FONT-SIZE: 12pt;
    }

    TABLE.Attendance {
        FONT-SIZE: 7pt;
    }

    .Withdrawn {
        COLOR: #000000;
        BACKGROUND-COLOR: #1e94d2;
    }

    .ShortAttendance {
        COLOR: #000000;
        BACKGROUND-COLOR: #ff0000;
    }

    .Combo {
        font-family: Arial;
        font-size: 8pt;
        font-style: oblique;
    }

    A.userWindow:link {
        color: #0000cc;
        background-color: transparent;
        text-decoration: none;
    }

    A.userWindow:visited {
        color: #0000cc;
        background-color: transparent;
        text-decoration: none;
    }

    A.userWindow:hover {
        color: #0066ff;
        background-color: transparent;
        text-decoration: underline;
    }

    A.leftMenu:active {
        color: #0000cc;
        background-color: transparent;
        text-decoration: none;
    }

    div#tbl-container {
        overflow: auto;
    }

        div#tbl-container table th {
        }

    thead th, thead th.locked {
        text-align: center;
        background-color: #0c54a3 !important;
        color: white;
        position: relative;
        border-right: 1px solid silver;
        cursor: default;
    }

    table tr th {
        background-color: #0c54a3 !important;
    }

    thead th {
        top: expression(document.getElementById("tbl-container").scrollTop-2); /*IE5+ only*/
        z-index: 20;
    }

        thead th.locked {
            z-index: 30;
        }

    td.locked, th.locked {
        border-right: 1px solid silver;
        left: expression(document.getElementById("tbl-container").scrollLeft); /*IE5+ only*/
        position: relative;
        z-index: 10;
    }

    table tr td {
        color: #000000;
    }

    td.normal {
    }
</style>

@{

    double CourseMarksNormalStd = 0;
    var CourseMarksExemptedStd = 0;
    double mfCourseMarksDistribution = 0;
    var miStdMain_Id = "";
    double TotalMarks = 0;
    var FacRow = 1;
    var RowId = 0;
    var counter = 0;
    var varmarks = 0;
    var Oldregistration = "";
    var gradeId = 0;
    double summ = 0;
    //  var mtMarksHead_Id = 0;
    var mtTmpMarksHead_Ids = 0;
    double CourseMarks = 0;
    var Grade = "";
    var mPstRecapShtData = "";
    var GPA = 0;
    double perc = 0;
    var OldtGradingPlan_Id = 0;
}

<br />
<br />
@if (Model.headermodel.Count != 0)
{
    <div id="tbl-container" cellpadding="0" cellspacing="0" style='width: 100%;height: 452px;' onscroll="ScrollDiv()" onmousedown="OnMouseBit()">
        <Table border=1 ID="tblRecap" bordercolor='#111111' class='table table-striped' cellspacing=0 style="border-collapse : collapse;">
            <thead>
                <tr>
                    <th class='locked'>S.#</th>
                    <th id=colName1 class='locked'>Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                    <th class='locked'>Reg.No</th>
                    @foreach (var item in Model.headermodel)
                    {

                        var msMarksHead_LongDesc = item.sMarksHead_ShortDesc;
                        var mfCourseMarksDistribution_TotalMarks = item.fCourseMarksDistribution_TotalMarks;
                        var mtCourseMarksDistribution_TotaLFrequency = item.tCourseMarksDistribution_TotalFrequency;
                        var mtCourseMarksDistribution_TotalExempted = item.tCourseMarksDistribution_TotalExempted;
                        var mtMarksHead_Id = item.tMarksHead_Id;
                        CourseMarksNormalStd = Convert.ToDouble(CourseMarksNormalStd) + Convert.ToDouble(Convert.ToDouble(mfCourseMarksDistribution_TotalMarks) * (Convert.ToInt32(mtCourseMarksDistribution_TotaLFrequency) - Convert.ToInt32(mtCourseMarksDistribution_TotalExempted)));

                        if (item.bMarksHead_ExemptedForDGS == 0)
                        {
                            CourseMarksExemptedStd = Convert.ToInt32(CourseMarksExemptedStd) + Convert.ToInt32(Convert.ToInt32(mfCourseMarksDistribution_TotalMarks) * (Convert.ToInt32(mtCourseMarksDistribution_TotaLFrequency) - Convert.ToInt32(mtCourseMarksDistribution_TotalExempted)));
                        }

                        for (int i = 1; i <= mtCourseMarksDistribution_TotaLFrequency; i++)
                        {
                            <th id='msMarksHead_LongDesc'>  @msMarksHead_LongDesc &nbsp; @i <hr> Max: @mfCourseMarksDistribution_TotalMarks  </th>
                        }
                    }

                    <th>&nbsp;&nbsp;</th>
                    @foreach (var item in Model.headermodel)
                    {

                        var msMarksHead_LongDesc = item.sMarksHead_ShortDesc;
                        double mfCourseMarksDistribution_TotalMarks = item.fCourseMarksDistribution_TotalMarks;
                        int mtCourseMarksDistribution_TotaLFrequency = item.tCourseMarksDistribution_TotalFrequency;
                        int mtCourseMarksDistribution_TotalExempted = item.tCourseMarksDistribution_TotalExempted;
                        var mtMarksHead_Id = item.tMarksHead_Id;

                        mfCourseMarksDistribution = Convert.ToDouble(mfCourseMarksDistribution_TotalMarks) * Convert.ToInt32((Convert.ToInt32(mtCourseMarksDistribution_TotaLFrequency) - Convert.ToInt32(mtCourseMarksDistribution_TotalExempted)));
                        <th>
                            @msMarksHead_LongDesc
                            @if (mtCourseMarksDistribution_TotalExempted != 0)
                            {
                                @item.tCourseMarksDistribution_TotalExempted

                            }
                            <hr>


                            Max: @mfCourseMarksDistribution

                        </th>

                    }
                    <th>Total Marks<br> @CourseMarksNormalStd </th>
                    <th>Total %</th>
                    <th>Grade<br>(Grd P No.)</th>
                    <th>GPA</th>
                </tr>
            </thead>
            <tbody id='tbodyrecap'>

                @foreach (var item in Model.detail)
                {
                    if (item.sStdMain_RegistrationNo != Oldregistration)
                    {
                        Oldregistration = item.sStdMain_RegistrationNo;
                        counter = counter + 1;
                        var varObtainMatks = item.fCourseRecapSheet_MarksObtained;
                        if (miStdMain_Id != item.iStdMain_Id)
                        {
                            TotalMarks = 0;
                            var bStdRegisteredCourse_Withdrawn = item.bStdRegisteredCourse_Withdrawn;
                            var bCourseLectureAttendance_Short = item.bCourseLectureAttendance_Short;
                            var bExamAttendanceFinal_Absent = item.bExamAttendanceFinal_Absent;
                            var sExplicitAssignedGrade_Grade = item.sExplicitAssignedGrade_Grade;
                            <tr>
                                <td class='locked'>@counter</td>
                                <td id=colName2 class='locked'>
                                    @item.sStdProfile_FullName
                                </td>
                                <td class='locked'>@item.sStdMain_RegistrationNo</td>
                                 @{
                                     int marks_head = 0;
                                     List<double> obtMarks = new List<double>();
                                     foreach (var obtained in Model.detail)
                                     {
                                         if (Oldregistration == obtained.sStdMain_RegistrationNo)
                                         {
                                             obtMarks.Add(obtained.fCourseRecapSheet_MarksObtained);
                                             marks_head++;
                                         }

                                     }
                                 }
                                @foreach (var item1 in Model.headermodel)
                                {
                                    if (item.bStdRegisteredCourse_Withdrawn == "False")
                                    {
                                        var mtMarksHead_Id = 0;
                                        //  &nbsp;
                                        bStdRegisteredCourse_Withdrawn = item.bStdRegisteredCourse_Withdrawn;
                                        summ = 0;
                                        mtMarksHead_Id = item1.tMarksHead_Id;
                                        for (int i =0; i < item1.tCourseMarksDistribution_TotalFrequency; i++)
                                        {
                                            //summ = Convert.ToInt32(item.fCourseRecapSheet_MarksObtained);
                                            summ = obtMarks[i];
                                            <td align=center class='normal'>
                                                @summ
                                            </td>
                                        }
                                        if (item.bStdRegisteredCourse_Withdrawn == "False")
                                        {
                                            var rsDGradersList = item.iStdMain_Id;
                                            var rsExMarksHead = item.sMarksHead_Id;
                                            var funcIsMarksHeadExempted = true;
                                            if (rsDGradersList == null)
                                            {
                                                funcIsMarksHeadExempted = false;
                                            }
                                            else if (rsExMarksHead == null)
                                            {
                                                funcIsMarksHeadExempted = false;
                                            }
                                            if (funcIsMarksHeadExempted == false)
                                            {
                                                TotalMarks = TotalMarks + summ;
                                            }
                                            else
                                            {

                                            }
                                        }
                                        else
                                        {

                                        }
                                    }
                                }
                                <th class='normal' style="color:#0c54a3 !important;">&nbsp;&nbsp;</th>
                                @* Start the Rows from there *@
                                @foreach (var item1 in Model.headermodel)
                                {
                                    <td align=center class='normal'>
                                        @if (item.bStdRegisteredCourse_Withdrawn == "False")
                                        {
                                            var mtMarksHead_Id = 0;
                                            //  &nbsp;
                                            bStdRegisteredCourse_Withdrawn = item.bStdRegisteredCourse_Withdrawn;
                                            summ = 0;
                                            mtMarksHead_Id = item1.tMarksHead_Id;
                                            for (int i = 1; i <= item1.tCourseMarksDistribution_TotalFrequency; i++)
                                            {
                                                summ = Convert.ToDouble(summ) + Convert.ToDouble(item.fCourseRecapSheet_MarksObtained);
                                            }
                                            if (item.bStdRegisteredCourse_Withdrawn == "False")
                                            {
                                                var rsDGradersList = item.iStdMain_Id;
                                                var rsExMarksHead = item.sMarksHead_Id;
                                                var funcIsMarksHeadExempted = true;
                                                if (rsDGradersList == null)
                                                {
                                                    funcIsMarksHeadExempted = false;
                                                }
                                                else if (rsExMarksHead == null)
                                                {
                                                    funcIsMarksHeadExempted = false;
                                                }
                                                if (funcIsMarksHeadExempted == false)
                                                {
                                                    TotalMarks = TotalMarks + summ;
                                                }
                                                else
                                                {

                                                }
                                            }
                                            else
                                            {

                                            }
                                            @summ
                                            //summ = summ + rsTmpRecapDet("fCourseRecapSheet_MarksObtained")
                                        }
                                    </td>
                                }
                                @* End the Rows from there *@
                                @foreach (var headitem in Model.headermodel)
                                {
                                    if (item.sMarksHead_Id == headitem.tMarksHead_Id)
                                    {
                                        CourseMarks = CourseMarksNormalStd;
                                    }

                                }
                                @{
                                    if (item.sExplicitAssignedGrade_Grade != "")
                                    {
                                        <td align=center class='normal'>@TotalMarks </td>
                                        <td align=center class='normal'>(@TotalMarks*100)/@CourseMarks</td>
                                        <td align=center class='normal'> @item.sExplicitAssignedGrade_Grade </td>
                                        <td align=center> 0 </td>
                                        Grade = @item.sExplicitAssignedGrade_Grade;
                                        GPA = 0;
                                        TotalMarks = 0;
                                        mPstRecapShtData = @mPstRecapShtData + @item.iStdMain_Id + "," + @Grade + "," + ((@TotalMarks * 100) / @CourseMarks) + "," + @GPA;
                                    }
                                    else if (item.bStdRegisteredCourse_Withdrawn != "False")
                                    {

                                        <td align=center class='normal'>-</td>
                                        <td align=center class='normal'>-</td>
                                        <td align=center class='normal'>W</td>
                                        <td align=center> 0 </td>
                                        Grade = "W";
                                        GPA = 0;
                                        TotalMarks = 0;
                                        mPstRecapShtData = mPstRecapShtData + item.iStdMain_Id + "," + Grade + "," + ((TotalMarks * 100) / CourseMarks) + "," + GPA;
                                    }
                                    else if (item.bCourseLectureAttendance_Short != "False")
                                    {

                                        <td align=center class='normal'>-</td>
                                        <td align=center class='normal'>-</td>
                                        <td align=center class='normal'>F</td>
                                        <td align=center> 0 </td>
                                        Grade = "F";
                                        GPA = 0;
                                        TotalMarks = 0;
                                        mPstRecapShtData = mPstRecapShtData + item.iStdMain_Id + "," + Grade + "," + ((TotalMarks * 100) / CourseMarks) + "," + GPA;
                                    }
                                    else if (item.bExamAttendanceFinal_Absent != "False")
                                    {
                                        <td align=center colspan=2 class='normal'>
                                            Absent in Final
                                        </td>
                                        <td align=center class='normal'>F</td>
                                        <td align=center> 0 </td>
                                        Grade = "F";
                                        GPA = 0;
                                        TotalMarks = 0;
                                        mPstRecapShtData = mPstRecapShtData + item.iStdMain_Id + "," + Grade + "," + ((TotalMarks * 100) / CourseMarks) + "," + GPA;
                                    }
                                    else
                                    {
                                        var gradeperno = "";
                                        var stdmainId = 0;
                                        var GPA1 = 0;
                                        foreach (var item2 in Model.grade)
                                        {
                                            if (Convert.ToInt32(item.iStdMain_Id) == item2.sStdMain_Id)
                                            {
                                                stdmainId = 0;
                                                if (TotalMarks >= Convert.ToInt32(item2.fGradingPlan_MarksFrom) && TotalMarks <= item2.fGradingPlan_MarksTo)
                                                {
                                                    if (stdmainId != item2.sStdMain_Id)
                                                    {
                                                        Grade = item2.sGradingPlan_Grade;
                                                        GPA = Convert.ToInt32(item2.fGradingPlan_GPA);
                                                        gradeperno = item2.sGradingPlan_Grade + '(' + (item2.tGradingPlan_Id) + ')';
                                                        GPA1 = Convert.ToInt32(item2.fGradingPlan_GPA);
                                                    }
                                                    stdmainId = item2.sStdMain_Id;
                                                }
                                            }
                                        }
                                        perc = (@TotalMarks * 100) / @CourseMarks;
                                        <td align=center class='normal'>@TotalMarks</td>
                                        <td align=center class='normal'>@perc</td>
                                        <td align=center class='normal'>@gradeperno</td>
                                        <td align=center class='normal'>@GPA1</td>
                                        mPstRecapShtData = mPstRecapShtData + item.iStdMain_Id + "," + Grade + "," + ((TotalMarks * 100) / CourseMarks) + "," + GPA + ";";

                                    }
                                }
                            </tr>
                        }
                    }
                }
                <input type="hidden" id="PstRecapShtData" value="@mPstRecapShtData" />
            </tbody>
        </Table>
    </div>
    <br>
}
else
{

    <h2> Course Outline / Marks Distribution Not posted for this course</h2>

}